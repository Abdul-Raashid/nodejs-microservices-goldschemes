// README.md
# Gold Scheme Microservices Application

This is a microservices-based application for managing gold investment schemes. The application consists of the following services:

1. **User Service**: Handles user authentication, registration, and profile management
2. **Gold Scheme Service**: Manages gold schemes and user purchases
3. **API Gateway**: Routes requests to appropriate services and handles authentication/authorization

## Gold Schemes

The application supports the following gold schemes:

- **Short-term (1-3 years)** with 1.5% interest
- **Medium-term (5-7 years)** with 2.5% interest
- **Long-term (12-15 years)** with 3.0% interest

## Architecture

The application follows a microservices architecture with the following components:

- **MongoDB**: NoSQL database for storing user information, scheme details, and purchase records
- **Express.js**: Web framework for building the APIs
- **Node.js**: JavaScript runtime environment
- **Docker**: Containerization platform for deploying services

## Getting Started

### Prerequisites

- Docker and Docker Compose
- Node.js (for development)

### Installation

1. Clone the repository
2. Navigate to the project root directory
3. Run `docker-compose up --build`

This will start all the services and make the application available at `http://localhost:3000`.

### Seed Data

To create initial data, run:

```bash
# For seeding users
cd user-service
npm run seed

# For seeding schemes
cd gold-scheme-service
npm run seed
```

## API Endpoints

### User Service

- `POST /api/users/signup` - Register a new user
- `POST /api/users/login` - User login
- `GET /api/users/me` - Get current user profile
- `GET /api/users` - Get all users (admin only)
- `GET /api/users/:id` - Get user by ID (admin only)

### Gold Scheme Service

- `GET /api/schemes` - Get all schemes
- `GET /api/schemes/:id` - Get scheme by ID
- `POST /api/schemes` - Create a new scheme (admin only)
- `PATCH /api/schemes/:id` - Update scheme (admin only)
- `DELETE /api/schemes/:id` - Delete scheme (admin only)
- `POST /api/purchases` - Create a new purchase
- `GET /api/purchases/my-purchases` - Get all purchases for current user
- `GET /api/purchases/:id` - Get purchase by ID
- `GET /api/purchases` - Get all purchases (admin only)
- `PATCH /api/purchases/:id/status` - Update purchase status (admin only)

## Authentication

The application uses JWT (JSON Web Token) for authentication. To access protected endpoints, include the token in the Authorization header:

```
Authorization: Bearer <token>
```

## Authorization

The application has two user roles:

- **User**: Can purchase schemes and view their own purchases
- **Admin**: Can manage schemes, view all users, and view all purchases

// Add package.json scripts for running seed scripts
// Update user-service/package.json to include:
"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js",
  "seed": "node data/seedUsers.js"
},

// Update gold-scheme-service/package.json to include:
"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js",
  "seed": "node data/seedSchemes.js"
},
